# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\model.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from commonfunctions import *
from cartoonization import *
from attendance import *
from admin import *




class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.auth = False
        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_frontalface_alt2.xml')
        # Flag to start conversion
        self.Ifchecked = False

        #Flag to start cartoonization
        self.ifCartoon = False

        #The frame we have now
        self.frame = []

        #Main Window
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)

        #Central Widget and splitter
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        
        #Label Widget
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        
        #Checkbutton Widget
        self.check = QtWidgets.QPushButton(self.splitter)
        self.check.setObjectName("check")
        self.check.clicked.connect(self.CheckFace)


        #cartoonbutton Widget
        self.cartoon = QtWidgets.QPushButton(self.splitter)
        self.cartoon.setObjectName("cartoon")
        self.cartoon.clicked.connect(self.cartoonFeed)



        #### They are all inside the Central Widget #############
        MainWindow.setCentralWidget(self.centralwidget)
        self.gridLayout.addWidget(self.splitter, 1, 0, 1, 1)


        #Menubar widget
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        
        #Statusbar Widget
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)



        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        ##
        self.clf = ViolaJones.load('model')
        self.faces = []

        #Worker Pthread to update image and not stuck the application
        self.Worker1 = Worker1()

        self.Worker1.start()
        self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Auth"))
        self.check.setText(_translate("MainWindow", "Check"))
        self.cartoon.setText(_translate("MainWindow", "cartoon"))
        self.label.setText(_translate("MainWindow", "Image Frames"))

    
    
    def ImageUpdateSlot(self, Image):
        self.frame = Image
        if self.ifCartoon:
            Image = cartoonization(Image)
        else:
            self.faces = get_faces(self.frame, self.clf)
            for i, j, x, y in self.faces:
                cv2.rectangle(self.frame, (j,i), (y, x), (255, 0, 0))

        ConvertToQtFormat = QImage(Image.data, Image.shape[1], Image.shape[0], QImage.Format_RGB888)
        Pic = ConvertToQtFormat.scaled(640, 480, Qt.KeepAspectRatio)
        self.label.setPixmap(QPixmap.fromImage(Pic))



    def CheckFace(self):   #This function will check for the user and if authenticated will get his name and pass it to the page
        #self.Ifchecked = not self.Ifchecked


        if len(self.faces) != 0:
            #gray=cv2.cvtColor(self.frame,cv2.COLOR_RGB2GRAY)
            # Detect faces
            #faces = self.face_cascade.detectMultiScale(gray, 1.1, 4)
            # Draw rectangle around the faces and crop the faces

            for (i, j, x, y) in self.faces:
                face = self.frame[j:y, i:x]
                print( check_img(face))
                self.auth = True        
                self.admin_page("osama")
                # self.Worker1.stop()





    def admin_page(self,name):
        #code the 2nd screen here
        self.Form = QtWidgets.QWidget()
        self.ui = admin_form()
        self.ui.setupUi(self.Form,name)
        self.Form.show()



    def cartoonFeed(self):
        self.ifCartoon = not self.ifCartoon
    



class Worker1(QThread):

    ImageUpdate = pyqtSignal(np.ndarray)
    def run(self):
        self.ThreadActive = True
        Capture = cv2.VideoCapture(0)
        while self.ThreadActive:
            ret, frame = Capture.read()
            if ret:
                Image = frame
                Image = cv2.cvtColor(Image, cv2.COLOR_BGR2RGB)
                FlippedImage = cv2.flip(Image, 1)
                self.ImageUpdate.emit(FlippedImage)
    def stop(self):
        self.ThreadActive = False
        self.quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
